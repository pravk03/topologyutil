// SPDX-FileCopyrightText: Copyright (C) SchedMD LLC.
// SPDX-License-Identifier: Apache-2.0

package cpumap

import (
	"os"
	"path"
	"reflect"
	"testing"

	"github.com/kelindar/bitmap"
	"k8s.io/utils/cpuset"

	"gitlab.com/SchedMD/slinky-dev/cpuutil/pkg/bitmaputil"
	"gitlab.com/SchedMD/slinky-dev/cpuutil/pkg/cpuinfo"
)

func getCpuInfos(dataDir string, opts ...cpuinfo.CPUInfoOption) ([]cpuinfo.CPUInfo, error) {
	hostRoot := path.Join("../../.testdata/", dataDir)
	if err := os.Setenv("HOST_ROOT", hostRoot); err != nil {
		return nil, err
	}
	cpuInfos, err := cpuinfo.GetCPUInfos(opts...)
	if err != nil {
		return nil, err
	}
	if err := os.Unsetenv("HOST_ROOT"); err != nil {
		return nil, err
	}
	return cpuInfos, nil
}

func bitmapFrom(data string) bitmap.Bitmap {
	out, err := bitmaputil.NewFrom(data)
	if err != nil {
		panic("failed to do NewFrom()")
	}
	return out
}

func TestNewCPUMap(t *testing.T) {
	tests := []struct {
		name    string
		dataDir string
		options []cpuinfo.CPUInfoOption
		want    CPUMap
	}{
		{
			name:    "empty",
			dataDir: "Empty",
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{},
				MachineToAbstract: map[int]int{},
			},
		},
		{
			name:    "13th Gen Intel(R) Core(TM) i7-1365U",
			dataDir: "13th_Gen_Intel(R)_Core(TM)_i7-1365U",
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0, 1),
					cpuset.New(2, 3),
					cpuset.New(4),
					cpuset.New(5),
					cpuset.New(6),
					cpuset.New(7),
					cpuset.New(8),
					cpuset.New(9),
					cpuset.New(10),
					cpuset.New(11),
				},
				MachineToAbstract: map[int]int{
					0:  0,
					1:  0,
					2:  1,
					3:  1,
					4:  2,
					5:  3,
					6:  4,
					7:  5,
					8:  6,
					9:  7,
					10: 8,
					11: 9,
				},
			},
		},
		{
			name:    "13th Gen Intel(R) Core(TM) i7-1365U (No E-Cores)",
			dataDir: "13th_Gen_Intel(R)_Core(TM)_i7-1365U",
			options: []cpuinfo.CPUInfoOption{
				cpuinfo.WithoutECores(),
			},
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0, 1),
					cpuset.New(2, 3),
				},
				MachineToAbstract: map[int]int{
					0: 0,
					1: 0,
					2: 1,
					3: 1,
				},
			},
		},
		{
			name:    "AMD EPYC 7252 8-Core Processor",
			dataDir: "AMD_EPYC_7252_8-Core_Processor",
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0, 16),
					cpuset.New(1, 17),
					cpuset.New(2, 18),
					cpuset.New(3, 19),
					cpuset.New(4, 20),
					cpuset.New(5, 21),
					cpuset.New(6, 22),
					cpuset.New(7, 23),
					cpuset.New(8, 24),
					cpuset.New(9, 25),
					cpuset.New(10, 26),
					cpuset.New(11, 27),
					cpuset.New(12, 28),
					cpuset.New(13, 29),
					cpuset.New(14, 30),
					cpuset.New(15, 31),
				},
				MachineToAbstract: map[int]int{
					0:  0,
					1:  1,
					2:  2,
					3:  3,
					4:  4,
					5:  5,
					6:  6,
					7:  7,
					8:  8,
					9:  9,
					10: 10,
					11: 11,
					12: 12,
					13: 13,
					14: 14,
					15: 15,
					16: 0,
					17: 1,
					18: 2,
					19: 3,
					20: 4,
					21: 5,
					22: 6,
					23: 7,
					24: 8,
					25: 9,
					26: 10,
					27: 11,
					28: 12,
					29: 13,
					30: 14,
					31: 15,
				},
			},
		},
		{
			name:    "AMD Ryzen 9 7950X 16-Core_Processor",
			dataDir: "AMD_Ryzen_9_7950X_16-Core_Processor",
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0, 16),
					cpuset.New(1, 17),
					cpuset.New(2, 18),
					cpuset.New(3, 19),
					cpuset.New(4, 20),
					cpuset.New(5, 21),
					cpuset.New(6, 22),
					cpuset.New(7, 23),
					cpuset.New(8, 24),
					cpuset.New(9, 25),
					cpuset.New(10, 26),
					cpuset.New(11, 27),
					cpuset.New(12, 28),
					cpuset.New(13, 29),
					cpuset.New(14, 30),
					cpuset.New(15, 31),
				},
				MachineToAbstract: map[int]int{
					0:  0,
					1:  1,
					2:  2,
					3:  3,
					4:  4,
					5:  5,
					6:  6,
					7:  7,
					8:  8,
					9:  9,
					10: 10,
					11: 11,
					12: 12,
					13: 13,
					14: 14,
					15: 15,
					16: 0,
					17: 1,
					18: 2,
					19: 3,
					20: 4,
					21: 5,
					22: 6,
					23: 7,
					24: 8,
					25: 9,
					26: 10,
					27: 11,
					28: 12,
					29: 13,
					30: 14,
					31: 15,
				},
			},
		},
		{
			name:    "Intel(R) Core(TM) i7-14650HX",
			dataDir: "Intel(R)_Core(TM)_i7-14650HX",
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0, 1),
					cpuset.New(2, 3),
					cpuset.New(4, 5),
					cpuset.New(6, 7),
					cpuset.New(8, 9),
					cpuset.New(10, 11),
					cpuset.New(12, 13),
					cpuset.New(14, 15),
					cpuset.New(16),
					cpuset.New(17),
					cpuset.New(18),
					cpuset.New(19),
					cpuset.New(20),
					cpuset.New(21),
					cpuset.New(22),
					cpuset.New(23),
				},
				MachineToAbstract: map[int]int{
					0:  0,
					1:  0,
					2:  1,
					3:  1,
					4:  2,
					5:  2,
					6:  3,
					7:  3,
					8:  4,
					9:  4,
					10: 5,
					11: 5,
					12: 6,
					13: 6,
					14: 7,
					15: 7,
					16: 8,
					17: 9,
					18: 10,
					19: 11,
					20: 12,
					21: 13,
					22: 14,
					23: 15,
				},
			},
		},
		{
			name:    "Intel(R) Core(TM) i7-14650HX (No E-Cores)",
			dataDir: "Intel(R)_Core(TM)_i7-14650HX",
			options: []cpuinfo.CPUInfoOption{
				cpuinfo.WithoutECores(),
			},
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0, 1),
					cpuset.New(2, 3),
					cpuset.New(4, 5),
					cpuset.New(6, 7),
					cpuset.New(8, 9),
					cpuset.New(10, 11),
					cpuset.New(12, 13),
					cpuset.New(14, 15),
				},
				MachineToAbstract: map[int]int{
					0:  0,
					1:  0,
					2:  1,
					3:  1,
					4:  2,
					5:  2,
					6:  3,
					7:  3,
					8:  4,
					9:  4,
					10: 5,
					11: 5,
					12: 6,
					13: 6,
					14: 7,
					15: 7,
				},
			},
		},
		{
			name:    "c3d-standard-60",
			dataDir: "c3d-standard-60",
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0, 30),
					cpuset.New(1, 31),
					cpuset.New(2, 32),
					cpuset.New(3, 33),
					cpuset.New(4, 34),
					cpuset.New(5, 35),
					cpuset.New(6, 36),
					cpuset.New(7, 37),
					cpuset.New(8, 38),
					cpuset.New(9, 39),
					cpuset.New(10, 40),
					cpuset.New(11, 41),
					cpuset.New(12, 42),
					cpuset.New(13, 43),
					cpuset.New(14, 44),
					cpuset.New(15, 45),
					cpuset.New(16, 46),
					cpuset.New(17, 47),
					cpuset.New(18, 48),
					cpuset.New(19, 49),
					cpuset.New(20, 50),
					cpuset.New(21, 51),
					cpuset.New(22, 52),
					cpuset.New(23, 53),
					cpuset.New(24, 54),
					cpuset.New(25, 55),
					cpuset.New(26, 56),
					cpuset.New(27, 57),
					cpuset.New(28, 58),
					cpuset.New(29, 59),
				},
				MachineToAbstract: map[int]int{
					0:  0,
					1:  1,
					2:  2,
					3:  3,
					4:  4,
					5:  5,
					6:  6,
					7:  7,
					8:  8,
					9:  9,
					10: 10,
					11: 11,
					12: 12,
					13: 13,
					14: 14,
					15: 15,
					16: 16,
					17: 17,
					18: 18,
					19: 19,
					20: 20,
					21: 21,
					22: 22,
					23: 23,
					24: 24,
					25: 25,
					26: 26,
					27: 27,
					28: 28,
					29: 29,
					30: 0,
					31: 1,
					32: 2,
					33: 3,
					34: 4,
					35: 5,
					36: 6,
					37: 7,
					38: 8,
					39: 9,
					40: 10,
					41: 11,
					42: 12,
					43: 13,
					44: 14,
					45: 15,
					46: 16,
					47: 17,
					48: 18,
					49: 19,
					50: 20,
					51: 21,
					52: 22,
					53: 23,
					54: 24,
					55: 25,
					56: 26,
					57: 27,
					58: 28,
					59: 29,
				},
			},
		},
		{
			name:    "c3d-standard-60_nosmt",
			dataDir: "c3d-standard-60_nosmt",
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0),
					cpuset.New(1),
					cpuset.New(2),
					cpuset.New(3),
					cpuset.New(4),
					cpuset.New(5),
					cpuset.New(6),
					cpuset.New(7),
					cpuset.New(8),
					cpuset.New(9),
					cpuset.New(10),
					cpuset.New(11),
					cpuset.New(12),
					cpuset.New(13),
					cpuset.New(14),
					cpuset.New(15),
					cpuset.New(16),
					cpuset.New(17),
					cpuset.New(18),
					cpuset.New(19),
					cpuset.New(20),
					cpuset.New(21),
					cpuset.New(22),
					cpuset.New(23),
					cpuset.New(24),
					cpuset.New(25),
					cpuset.New(26),
					cpuset.New(27),
					cpuset.New(28),
					cpuset.New(29),
				},
				MachineToAbstract: map[int]int{
					0:  0,
					1:  1,
					2:  2,
					3:  3,
					4:  4,
					5:  5,
					6:  6,
					7:  7,
					8:  8,
					9:  9,
					10: 10,
					11: 11,
					12: 12,
					13: 13,
					14: 14,
					15: 15,
					16: 16,
					17: 17,
					18: 18,
					19: 19,
					20: 20,
					21: 21,
					22: 22,
					23: 23,
					24: 24,
					25: 25,
					26: 26,
					27: 27,
					28: 28,
					29: 29,
				},
			},
		},
		{
			name:    "c3d-standard-360",
			dataDir: "c3d-standard-360",
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0, 180),
					cpuset.New(1, 181),
					cpuset.New(2, 182),
					cpuset.New(3, 183),
					cpuset.New(4, 184),
					cpuset.New(5, 185),
					cpuset.New(6, 186),
					cpuset.New(7, 187),
					cpuset.New(8, 188),
					cpuset.New(9, 189),
					cpuset.New(10, 190),
					cpuset.New(11, 191),
					cpuset.New(12, 192),
					cpuset.New(13, 193),
					cpuset.New(14, 194),
					cpuset.New(15, 195),
					cpuset.New(16, 196),
					cpuset.New(17, 197),
					cpuset.New(18, 198),
					cpuset.New(19, 199),
					cpuset.New(20, 200),
					cpuset.New(21, 201),
					cpuset.New(22, 202),
					cpuset.New(23, 203),
					cpuset.New(24, 204),
					cpuset.New(25, 205),
					cpuset.New(26, 206),
					cpuset.New(27, 207),
					cpuset.New(28, 208),
					cpuset.New(29, 209),
					cpuset.New(30, 210),
					cpuset.New(31, 211),
					cpuset.New(32, 212),
					cpuset.New(33, 213),
					cpuset.New(34, 214),
					cpuset.New(35, 215),
					cpuset.New(36, 216),
					cpuset.New(37, 217),
					cpuset.New(38, 218),
					cpuset.New(39, 219),
					cpuset.New(40, 220),
					cpuset.New(41, 221),
					cpuset.New(42, 222),
					cpuset.New(43, 223),
					cpuset.New(44, 224),
					cpuset.New(45, 225),
					cpuset.New(46, 226),
					cpuset.New(47, 227),
					cpuset.New(48, 228),
					cpuset.New(49, 229),
					cpuset.New(50, 230),
					cpuset.New(51, 231),
					cpuset.New(52, 232),
					cpuset.New(53, 233),
					cpuset.New(54, 234),
					cpuset.New(55, 235),
					cpuset.New(56, 236),
					cpuset.New(57, 237),
					cpuset.New(58, 238),
					cpuset.New(59, 239),
					cpuset.New(60, 240),
					cpuset.New(61, 241),
					cpuset.New(62, 242),
					cpuset.New(63, 243),
					cpuset.New(64, 244),
					cpuset.New(65, 245),
					cpuset.New(66, 246),
					cpuset.New(67, 247),
					cpuset.New(68, 248),
					cpuset.New(69, 249),
					cpuset.New(70, 250),
					cpuset.New(71, 251),
					cpuset.New(72, 252),
					cpuset.New(73, 253),
					cpuset.New(74, 254),
					cpuset.New(75, 255),
					cpuset.New(76, 256),
					cpuset.New(77, 257),
					cpuset.New(78, 258),
					cpuset.New(79, 259),
					cpuset.New(80, 260),
					cpuset.New(81, 261),
					cpuset.New(82, 262),
					cpuset.New(83, 263),
					cpuset.New(84, 264),
					cpuset.New(85, 265),
					cpuset.New(86, 266),
					cpuset.New(87, 267),
					cpuset.New(88, 268),
					cpuset.New(89, 269),
					cpuset.New(90, 270),
					cpuset.New(91, 271),
					cpuset.New(92, 272),
					cpuset.New(93, 273),
					cpuset.New(94, 274),
					cpuset.New(95, 275),
					cpuset.New(96, 276),
					cpuset.New(97, 277),
					cpuset.New(98, 278),
					cpuset.New(99, 279),
					cpuset.New(100, 280),
					cpuset.New(101, 281),
					cpuset.New(102, 282),
					cpuset.New(103, 283),
					cpuset.New(104, 284),
					cpuset.New(105, 285),
					cpuset.New(106, 286),
					cpuset.New(107, 287),
					cpuset.New(108, 288),
					cpuset.New(109, 289),
					cpuset.New(110, 290),
					cpuset.New(111, 291),
					cpuset.New(112, 292),
					cpuset.New(113, 293),
					cpuset.New(114, 294),
					cpuset.New(115, 295),
					cpuset.New(116, 296),
					cpuset.New(117, 297),
					cpuset.New(118, 298),
					cpuset.New(119, 299),
					cpuset.New(120, 300),
					cpuset.New(121, 301),
					cpuset.New(122, 302),
					cpuset.New(123, 303),
					cpuset.New(124, 304),
					cpuset.New(125, 305),
					cpuset.New(126, 306),
					cpuset.New(127, 307),
					cpuset.New(128, 308),
					cpuset.New(129, 309),
					cpuset.New(130, 310),
					cpuset.New(131, 311),
					cpuset.New(132, 312),
					cpuset.New(133, 313),
					cpuset.New(134, 314),
					cpuset.New(135, 315),
					cpuset.New(136, 316),
					cpuset.New(137, 317),
					cpuset.New(138, 318),
					cpuset.New(139, 319),
					cpuset.New(140, 320),
					cpuset.New(141, 321),
					cpuset.New(142, 322),
					cpuset.New(143, 323),
					cpuset.New(144, 324),
					cpuset.New(145, 325),
					cpuset.New(146, 326),
					cpuset.New(147, 327),
					cpuset.New(148, 328),
					cpuset.New(149, 329),
					cpuset.New(150, 330),
					cpuset.New(151, 331),
					cpuset.New(152, 332),
					cpuset.New(153, 333),
					cpuset.New(154, 334),
					cpuset.New(155, 335),
					cpuset.New(156, 336),
					cpuset.New(157, 337),
					cpuset.New(158, 338),
					cpuset.New(159, 339),
					cpuset.New(160, 340),
					cpuset.New(161, 341),
					cpuset.New(162, 342),
					cpuset.New(163, 343),
					cpuset.New(164, 344),
					cpuset.New(165, 345),
					cpuset.New(166, 346),
					cpuset.New(167, 347),
					cpuset.New(168, 348),
					cpuset.New(169, 349),
					cpuset.New(170, 350),
					cpuset.New(171, 351),
					cpuset.New(172, 352),
					cpuset.New(173, 353),
					cpuset.New(174, 354),
					cpuset.New(175, 355),
					cpuset.New(176, 356),
					cpuset.New(177, 357),
					cpuset.New(178, 358),
					cpuset.New(179, 359),
				},
				MachineToAbstract: map[int]int{
					0:   0,
					1:   1,
					2:   2,
					3:   3,
					4:   4,
					5:   5,
					6:   6,
					7:   7,
					8:   8,
					9:   9,
					10:  10,
					11:  11,
					12:  12,
					13:  13,
					14:  14,
					15:  15,
					16:  16,
					17:  17,
					18:  18,
					19:  19,
					20:  20,
					21:  21,
					22:  22,
					23:  23,
					24:  24,
					25:  25,
					26:  26,
					27:  27,
					28:  28,
					29:  29,
					30:  30,
					31:  31,
					32:  32,
					33:  33,
					34:  34,
					35:  35,
					36:  36,
					37:  37,
					38:  38,
					39:  39,
					40:  40,
					41:  41,
					42:  42,
					43:  43,
					44:  44,
					45:  45,
					46:  46,
					47:  47,
					48:  48,
					49:  49,
					50:  50,
					51:  51,
					52:  52,
					53:  53,
					54:  54,
					55:  55,
					56:  56,
					57:  57,
					58:  58,
					59:  59,
					60:  60,
					61:  61,
					62:  62,
					63:  63,
					64:  64,
					65:  65,
					66:  66,
					67:  67,
					68:  68,
					69:  69,
					70:  70,
					71:  71,
					72:  72,
					73:  73,
					74:  74,
					75:  75,
					76:  76,
					77:  77,
					78:  78,
					79:  79,
					80:  80,
					81:  81,
					82:  82,
					83:  83,
					84:  84,
					85:  85,
					86:  86,
					87:  87,
					88:  88,
					89:  89,
					90:  90,
					91:  91,
					92:  92,
					93:  93,
					94:  94,
					95:  95,
					96:  96,
					97:  97,
					98:  98,
					99:  99,
					100: 100,
					101: 101,
					102: 102,
					103: 103,
					104: 104,
					105: 105,
					106: 106,
					107: 107,
					108: 108,
					109: 109,
					110: 110,
					111: 111,
					112: 112,
					113: 113,
					114: 114,
					115: 115,
					116: 116,
					117: 117,
					118: 118,
					119: 119,
					120: 120,
					121: 121,
					122: 122,
					123: 123,
					124: 124,
					125: 125,
					126: 126,
					127: 127,
					128: 128,
					129: 129,
					130: 130,
					131: 131,
					132: 132,
					133: 133,
					134: 134,
					135: 135,
					136: 136,
					137: 137,
					138: 138,
					139: 139,
					140: 140,
					141: 141,
					142: 142,
					143: 143,
					144: 144,
					145: 145,
					146: 146,
					147: 147,
					148: 148,
					149: 149,
					150: 150,
					151: 151,
					152: 152,
					153: 153,
					154: 154,
					155: 155,
					156: 156,
					157: 157,
					158: 158,
					159: 159,
					160: 160,
					161: 161,
					162: 162,
					163: 163,
					164: 164,
					165: 165,
					166: 166,
					167: 167,
					168: 168,
					169: 169,
					170: 170,
					171: 171,
					172: 172,
					173: 173,
					174: 174,
					175: 175,
					176: 176,
					177: 177,
					178: 178,
					179: 179,
					180: 0,
					181: 1,
					182: 2,
					183: 3,
					184: 4,
					185: 5,
					186: 6,
					187: 7,
					188: 8,
					189: 9,
					190: 10,
					191: 11,
					192: 12,
					193: 13,
					194: 14,
					195: 15,
					196: 16,
					197: 17,
					198: 18,
					199: 19,
					200: 20,
					201: 21,
					202: 22,
					203: 23,
					204: 24,
					205: 25,
					206: 26,
					207: 27,
					208: 28,
					209: 29,
					210: 30,
					211: 31,
					212: 32,
					213: 33,
					214: 34,
					215: 35,
					216: 36,
					217: 37,
					218: 38,
					219: 39,
					220: 40,
					221: 41,
					222: 42,
					223: 43,
					224: 44,
					225: 45,
					226: 46,
					227: 47,
					228: 48,
					229: 49,
					230: 50,
					231: 51,
					232: 52,
					233: 53,
					234: 54,
					235: 55,
					236: 56,
					237: 57,
					238: 58,
					239: 59,
					240: 60,
					241: 61,
					242: 62,
					243: 63,
					244: 64,
					245: 65,
					246: 66,
					247: 67,
					248: 68,
					249: 69,
					250: 70,
					251: 71,
					252: 72,
					253: 73,
					254: 74,
					255: 75,
					256: 76,
					257: 77,
					258: 78,
					259: 79,
					260: 80,
					261: 81,
					262: 82,
					263: 83,
					264: 84,
					265: 85,
					266: 86,
					267: 87,
					268: 88,
					269: 89,
					270: 90,
					271: 91,
					272: 92,
					273: 93,
					274: 94,
					275: 95,
					276: 96,
					277: 97,
					278: 98,
					279: 99,
					280: 100,
					281: 101,
					282: 102,
					283: 103,
					284: 104,
					285: 105,
					286: 106,
					287: 107,
					288: 108,
					289: 109,
					290: 110,
					291: 111,
					292: 112,
					293: 113,
					294: 114,
					295: 115,
					296: 116,
					297: 117,
					298: 118,
					299: 119,
					300: 120,
					301: 121,
					302: 122,
					303: 123,
					304: 124,
					305: 125,
					306: 126,
					307: 127,
					308: 128,
					309: 129,
					310: 130,
					311: 131,
					312: 132,
					313: 133,
					314: 134,
					315: 135,
					316: 136,
					317: 137,
					318: 138,
					319: 139,
					320: 140,
					321: 141,
					322: 142,
					323: 143,
					324: 144,
					325: 145,
					326: 146,
					327: 147,
					328: 148,
					329: 149,
					330: 150,
					331: 151,
					332: 152,
					333: 153,
					334: 154,
					335: 155,
					336: 156,
					337: 157,
					338: 158,
					339: 159,
					340: 160,
					341: 161,
					342: 162,
					343: 163,
					344: 164,
					345: 165,
					346: 166,
					347: 167,
					348: 168,
					349: 169,
					350: 170,
					351: 171,
					352: 172,
					353: 173,
					354: 174,
					355: 175,
					356: 176,
					357: 177,
					358: 178,
					359: 179,
				},
			},
		},
		{
			name:    "c4-standard-192",
			dataDir: "c4-standard-192",
			want: CPUMap{
				AbstractToMachine: []cpuset.CPUSet{
					cpuset.New(0, 96),
					cpuset.New(1, 97),
					cpuset.New(2, 98),
					cpuset.New(3, 99),
					cpuset.New(4, 100),
					cpuset.New(5, 101),
					cpuset.New(6, 102),
					cpuset.New(7, 103),
					cpuset.New(8, 104),
					cpuset.New(9, 105),
					cpuset.New(10, 106),
					cpuset.New(11, 107),
					cpuset.New(12, 108),
					cpuset.New(13, 109),
					cpuset.New(14, 110),
					cpuset.New(15, 111),
					cpuset.New(16, 112),
					cpuset.New(17, 113),
					cpuset.New(18, 114),
					cpuset.New(19, 115),
					cpuset.New(20, 116),
					cpuset.New(21, 117),
					cpuset.New(22, 118),
					cpuset.New(23, 119),
					cpuset.New(24, 120),
					cpuset.New(25, 121),
					cpuset.New(26, 122),
					cpuset.New(27, 123),
					cpuset.New(28, 124),
					cpuset.New(29, 125),
					cpuset.New(30, 126),
					cpuset.New(31, 127),
					cpuset.New(32, 128),
					cpuset.New(33, 129),
					cpuset.New(34, 130),
					cpuset.New(35, 131),
					cpuset.New(36, 132),
					cpuset.New(37, 133),
					cpuset.New(38, 134),
					cpuset.New(39, 135),
					cpuset.New(40, 136),
					cpuset.New(41, 137),
					cpuset.New(42, 138),
					cpuset.New(43, 139),
					cpuset.New(44, 140),
					cpuset.New(45, 141),
					cpuset.New(46, 142),
					cpuset.New(47, 143),
					cpuset.New(48, 144),
					cpuset.New(49, 145),
					cpuset.New(50, 146),
					cpuset.New(51, 147),
					cpuset.New(52, 148),
					cpuset.New(53, 149),
					cpuset.New(54, 150),
					cpuset.New(55, 151),
					cpuset.New(56, 152),
					cpuset.New(57, 153),
					cpuset.New(58, 154),
					cpuset.New(59, 155),
					cpuset.New(60, 156),
					cpuset.New(61, 157),
					cpuset.New(62, 158),
					cpuset.New(63, 159),
					cpuset.New(64, 160),
					cpuset.New(65, 161),
					cpuset.New(66, 162),
					cpuset.New(67, 163),
					cpuset.New(68, 164),
					cpuset.New(69, 165),
					cpuset.New(70, 166),
					cpuset.New(71, 167),
					cpuset.New(72, 168),
					cpuset.New(73, 169),
					cpuset.New(74, 170),
					cpuset.New(75, 171),
					cpuset.New(76, 172),
					cpuset.New(77, 173),
					cpuset.New(78, 174),
					cpuset.New(79, 175),
					cpuset.New(80, 176),
					cpuset.New(81, 177),
					cpuset.New(82, 178),
					cpuset.New(83, 179),
					cpuset.New(84, 180),
					cpuset.New(85, 181),
					cpuset.New(86, 182),
					cpuset.New(87, 183),
					cpuset.New(88, 184),
					cpuset.New(89, 185),
					cpuset.New(90, 186),
					cpuset.New(91, 187),
					cpuset.New(92, 188),
					cpuset.New(93, 189),
					cpuset.New(94, 190),
					cpuset.New(95, 191),
				},
				MachineToAbstract: map[int]int{
					0:   0,
					1:   1,
					2:   2,
					3:   3,
					4:   4,
					5:   5,
					6:   6,
					7:   7,
					8:   8,
					9:   9,
					10:  10,
					11:  11,
					12:  12,
					13:  13,
					14:  14,
					15:  15,
					16:  16,
					17:  17,
					18:  18,
					19:  19,
					20:  20,
					21:  21,
					22:  22,
					23:  23,
					24:  24,
					25:  25,
					26:  26,
					27:  27,
					28:  28,
					29:  29,
					30:  30,
					31:  31,
					32:  32,
					33:  33,
					34:  34,
					35:  35,
					36:  36,
					37:  37,
					38:  38,
					39:  39,
					40:  40,
					41:  41,
					42:  42,
					43:  43,
					44:  44,
					45:  45,
					46:  46,
					47:  47,
					48:  48,
					49:  49,
					50:  50,
					51:  51,
					52:  52,
					53:  53,
					54:  54,
					55:  55,
					56:  56,
					57:  57,
					58:  58,
					59:  59,
					60:  60,
					61:  61,
					62:  62,
					63:  63,
					64:  64,
					65:  65,
					66:  66,
					67:  67,
					68:  68,
					69:  69,
					70:  70,
					71:  71,
					72:  72,
					73:  73,
					74:  74,
					75:  75,
					76:  76,
					77:  77,
					78:  78,
					79:  79,
					80:  80,
					81:  81,
					82:  82,
					83:  83,
					84:  84,
					85:  85,
					86:  86,
					87:  87,
					88:  88,
					89:  89,
					90:  90,
					91:  91,
					92:  92,
					93:  93,
					94:  94,
					95:  95,
					96:  0,
					97:  1,
					98:  2,
					99:  3,
					100: 4,
					101: 5,
					102: 6,
					103: 7,
					104: 8,
					105: 9,
					106: 10,
					107: 11,
					108: 12,
					109: 13,
					110: 14,
					111: 15,
					112: 16,
					113: 17,
					114: 18,
					115: 19,
					116: 20,
					117: 21,
					118: 22,
					119: 23,
					120: 24,
					121: 25,
					122: 26,
					123: 27,
					124: 28,
					125: 29,
					126: 30,
					127: 31,
					128: 32,
					129: 33,
					130: 34,
					131: 35,
					132: 36,
					133: 37,
					134: 38,
					135: 39,
					136: 40,
					137: 41,
					138: 42,
					139: 43,
					140: 44,
					141: 45,
					142: 46,
					143: 47,
					144: 48,
					145: 49,
					146: 50,
					147: 51,
					148: 52,
					149: 53,
					150: 54,
					151: 55,
					152: 56,
					153: 57,
					154: 58,
					155: 59,
					156: 60,
					157: 61,
					158: 62,
					159: 63,
					160: 64,
					161: 65,
					162: 66,
					163: 67,
					164: 68,
					165: 69,
					166: 70,
					167: 71,
					168: 72,
					169: 73,
					170: 74,
					171: 75,
					172: 76,
					173: 77,
					174: 78,
					175: 79,
					176: 80,
					177: 81,
					178: 82,
					179: 83,
					180: 84,
					181: 85,
					182: 86,
					183: 87,
					184: 88,
					185: 89,
					186: 90,
					187: 91,
					188: 92,
					189: 93,
					190: 94,
					191: 95,
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cpuInfos, err := getCpuInfos(tt.dataDir, tt.options...)
			if err != nil {
				t.Errorf("getCpuInfos() error = %v", err)
				return
			}
			if got := NewCPUMap(cpuInfos); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewCPUMap() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestCPUMap_GetOnesBitmap(t *testing.T) {
	tests := []struct {
		name    string
		dataDir string
		options []cpuinfo.CPUInfoOption
		want    bitmap.Bitmap
	}{
		{
			name:    "13th Gen Intel(R) Core(TM) i7-1365U",
			dataDir: "13th_Gen_Intel(R)_Core(TM)_i7-1365U",
			want:    bitmapFrom("0x3ff"),
		},
		{
			name:    "13th Gen Intel(R) Core(TM) i7-1365U (No E-Cores)",
			dataDir: "13th_Gen_Intel(R)_Core(TM)_i7-1365U",
			options: []cpuinfo.CPUInfoOption{
				cpuinfo.WithoutECores(),
			},
			want: bitmapFrom("0x3"),
		},
		{
			name:    "AMD EPYC 7252 8-Core Processor",
			dataDir: "AMD_EPYC_7252_8-Core_Processor",
			want:    bitmapFrom("0xffff"),
		},
		{
			name:    "c3d-standard-360",
			dataDir: "c3d-standard-360",
			want:    bitmapFrom("0xfffffffffffffffffffffffffffffffffffffffffffff"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cpuInfos, err := getCpuInfos(tt.dataDir, tt.options...)
			if err != nil {
				t.Errorf("getCpuInfos() error = %v", err)
				return
			}
			cpuMap := NewCPUMap(cpuInfos)
			if got := cpuMap.GetOnesBitmap(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CPUMap.GetOnesBitmap() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestCPUMap_ToAbstractCPUs(t *testing.T) {
	type args struct {
		macCpuSet cpuset.CPUSet
	}
	tests := []struct {
		name    string
		dataDir string
		args    args
		want    bitmap.Bitmap
	}{
		{
			name:    "empty",
			dataDir: "Empty",
			args: args{
				macCpuSet: cpuset.New(),
			},
			want: bitmap.Bitmap{},
		},
		{
			name:    "[AMD Ryzen 9 7950X 16-Core_Processor] adjacent",
			dataDir: "AMD_Ryzen_9_7950X_16-Core_Processor",
			args: args{
				macCpuSet: cpuset.New(0, 16, 15, 31),
			},
			want: bitmapFrom("0x8001"),
		},
		{
			name:    "[AMD Ryzen 9 7950X 16-Core_Processor] sparce",
			dataDir: "AMD_Ryzen_9_7950X_16-Core_Processor",
			args: args{
				macCpuSet: cpuset.New(0, 1, 30, 31),
			},
			want: bitmapFrom("0xc003"),
		},
		{
			name:    "[Intel(R) Core(TM) i7-14650HX] adjacent",
			dataDir: "Intel(R)_Core(TM)_i7-14650HX",
			args: args{
				macCpuSet: cpuset.New(0, 1, 14, 15),
			},
			want: bitmapFrom("0x81"),
		},
		{
			name:    "[Intel(R) Core(TM) i7-14650HX] sparce",
			dataDir: "Intel(R)_Core(TM)_i7-14650HX",
			args: args{
				macCpuSet: cpuset.New(0, 2, 13, 15),
			},
			want: bitmapFrom("0xc3"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cpuInfos, err := getCpuInfos(tt.dataDir)
			if err != nil {
				t.Errorf("getCpuInfos() error = %v", err)
				return
			}
			cpuMap := NewCPUMap(cpuInfos)
			if got := cpuMap.ToAbstractCPUs(tt.args.macCpuSet); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CPUMap.ToAbstractCPUs() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestCPUMap_ToMachineCPUs(t *testing.T) {
	type args struct {
		absBitmap bitmap.Bitmap
	}
	tests := []struct {
		name    string
		dataDir string
		args    args
		want    cpuset.CPUSet
	}{
		{
			name:    "empty",
			dataDir: "Empty",
			args: args{
				absBitmap: bitmapFrom("0x0"),
			},
			want: cpuset.New(),
		},
		{
			name:    "[AMD Ryzen 9 7950X 16-Core_Processor] adjacent",
			dataDir: "AMD_Ryzen_9_7950X_16-Core_Processor",
			args: args{
				absBitmap: bitmapFrom("0x8001"),
			},
			want: cpuset.New(0, 16, 15, 31),
		},
		{
			name:    "[AMD Ryzen 9 7950X 16-Core_Processor] sparce",
			dataDir: "AMD_Ryzen_9_7950X_16-Core_Processor",
			args: args{
				absBitmap: bitmapFrom("0xc003"),
			},
			want: cpuset.New(0, 1, 14, 15, 16, 17, 30, 31),
		},
		{
			name:    "[Intel(R) Core(TM) i7-14650HX] adjacent",
			dataDir: "Intel(R)_Core(TM)_i7-14650HX",
			args: args{
				absBitmap: bitmapFrom("0x81"),
			},
			want: cpuset.New(0, 1, 14, 15),
		},
		{
			name:    "[Intel(R) Core(TM) i7-14650HX] sparce",
			dataDir: "Intel(R)_Core(TM)_i7-14650HX",
			args: args{
				absBitmap: bitmapFrom("0xc3"),
			},
			want: cpuset.New(0, 1, 2, 3, 12, 13, 14, 15),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cpuInfos, err := getCpuInfos(tt.dataDir)
			if err != nil {
				t.Errorf("getCpuInfos() error = %v", err)
				return
			}
			cpuMap := NewCPUMap(cpuInfos)
			if got := cpuMap.ToMachineCPUs(tt.args.absBitmap); !got.Equals(tt.want) {
				t.Errorf("CPUMap.ToMachineCPUs() = %v, want %v", got, tt.want)
			}
		})
	}
}
